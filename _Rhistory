abstract_insert <- ''
}
if (is.na(title) == FALSE){title_insert <- gsub("[\r\n]", "", title)}else{
title_insert <- ''
}
if (is.na(dates) == FALSE){
date_received <- gsub("[\r\n]", "", dates[1])
date_received <- gsub("Received:", "", date_received)
date_accepted <- gsub("[\r\n]", "", dates[2])
date_accepted <- gsub("Accepted:", "", date_accepted)
date_published <- gsub("[\r\n]", "", dates[3])
date_published <- gsub("Published Online:", "", date_published)}
else{
date_received <- ''
date_accepted <- ''
date_published <- ''
}
if (is.na(dates) == FALSE){
date_received <- gsub("[\r\n]", "", dates[1])
date_received <- gsub("Received:", "", date_received)
date_accepted <- gsub("[\r\n]", "", dates[2])
date_accepted <- gsub("Accepted:", "", date_accepted)
date_published <- gsub("[\r\n]", "", dates[3])
date_published <- gsub("Published Online:", "", date_published)
}else{
date_received <- ''
date_accepted <- ''
date_published <- ''
}
links_id_insert <- gsub('http://dx.doi.org/10.1287/', "", links_id)
insert_query <- paste0('INSERT INTO informations VALUES (',links_id, ', ', title_insert, ', ',
affiliations_insert, ', ', keywords_insert, ', ', date_received, ', ', date_accepted, ', ',
date_published, ', ', abstract_insert, ')')
insert_query
con
dbDisconnect(con)
dbListTables()
library(rvest)
source('~/BIA656_PaperProbability/R_Scraper/Scraper.R')
insert_query
dbSendQuery(con, insert_query)
insert_query <- paste0("INSERT INTO informations VALUES ('",links_id_insert, "', '", title_insert, "', '",
affiliations_insert, "', '", keywords_insert, "', '", date_received, "', '", date_accepted, "', '",
date_published, "', '", abstract_insert, "')")
dbSendQuery(con, insert_query)
dbListFields(con, 'informations')
insert_query <- paste0("INSERT INTO informations VALUES ('",links_id_insert, "', '", title_insert, "', '", author_insert, "', '",
affiliations_insert, "', '", keywords_insert, "', '", date_received, "', '", date_accepted, "', '",
date_published, "', '", abstract_insert, "')")
dbSendQuery(con, insert_query)
dbSendQuery(con, insert_query)
dbSendQuery(con, 'DROP TABLE informations')
source('~/BIA656_PaperProbability/R_Scraper/Scraper.R')
total_to_scrape <- length(links_list[[1]])
library(rvest)
library(RSQLite)
library(DBI)
path_to_files = '/Users/pedroveronezi/BIA656_PaperProbability/'
path_to_links_file <- 'links_ids.txt'
con = dbConnect(RSQLite::SQLite(), dbname=paste0(path_to_files,"PaperProbability.db"))
min_max_sleep_time <- c(60, 120)
links_list <- read.table(paste0(path_to_files,path_to_links_file))
total_to_scrape <- length(links_list[[1]])
total_to_scrape
source('~/BIA656_PaperProbability/R_Scraper/Scraper.R')
library(rvest)
library(RSQLite)
library(DBI)
con = dbConnect(RSQLite::SQLite(), dbname=paste0(path_to_files,"PaperProbability.db"))
source('~/BIA656_PaperProbability/R_Scraper/Scraper.R')
source('~/BIA656_PaperProbability/R_Scraper/Scraper.R')
library(plotly)
# Declares the functions
calculate_reward <- function(pt, a){
temp = (pt*a) + 1
output = log(temp)
return(output)
}
# Declare the initial values for functions
dk = 0.01
dt_minutes = 5
dt_hours = dt_minutes / 60
K = 4
time_line = seq(7, 23, dt_hours)
lambda = 1.5585
inventory_level = seq(0, 4, dk)
# Creates the vector to price changes (simulating the real ones)
pt = runif(length(time_line), 10, 40)
# Creates the matrix to store the values over time (rows) and over k (columns)
optimum_values = matrix(nrow = length(time_line), ncol = length(inventory_level))
colnames(optimum_values) <- inventory_level
rownames(optimum_values) <- time_line
# fill up with 0 the first column and first row
for (i in 1:length(optimum_values[1,])){
optimum_values[length(optimum_values[,1]),i] <- 0
}
for (i in 1:length(optimum_values[,1])){
optimum_values[i,1] <- 0
}
a_list = c(0)
for (col in 2:length(optimum_values[1,])){
a_list <- c(a_list, as.numeric(colnames(optimum_values)[col]))
for (row in (length(optimum_values[,1])):1){
max_value <- 0
for (a in a_list){
if (as.numeric(colnames(optimum_values)[col]) != a){
ite <- calculate_reward(pt[row], a) + optimum_values[row, as.character(round(as.numeric(colnames(optimum_values)[col]) - a, 2))]
}else{
ite <- calculate_reward(pt[row], a) + 0
}
if (ite > max_value){
max_value <- ite
}
}
optimum_values[(row-1), col] <- (1 - (lambda * dt_hours))*optimum_values[row,col] + (lambda * dt_hours) * max_value
}
}
min(1,3)
# Declares the functions
calculate_reward <- function(pt, a){
temp = (pt*a) + 1
output = log(temp)
return(output)
}
c_bound <- 0.4
# Declare the initial values for functions
dk = 0.01
dt_minutes = 5
dt_hours = dt_minutes / 60
K = 4
time_line = seq(7, 23, dt_hours)
lambda = 1.5585
inventory_level = seq(0, 4, dk)
# Creates the vector to price changes (simulating the real ones)
pt = runif(length(time_line), 10, 40)
# Creates the matrix to store the values over time (rows) and over k (columns)
optimum_values = matrix(nrow = length(time_line), ncol = length(inventory_level))
colnames(optimum_values) <- inventory_level
rownames(optimum_values) <- time_line
# fill up with 0 the first column and first row
for (i in 1:length(optimum_values[1,])){
optimum_values[length(optimum_values[,1]),i] <- 0
}
for (i in 1:length(optimum_values[,1])){
optimum_values[i,1] <- 0
}
a_list = c(0)
for (col in 2:length(optimum_values[1,])){
b <- min(c_bound, as.numeric(colnames(optimum_discharge)[col]))
a_list <- c(a_list, b)
for (row in (length(optimum_values[,1])):1){
max_value <- 0
for (a in a_list){
if (as.numeric(colnames(optimum_values)[col]) != a){
ite <- calculate_reward(pt[row], a) + optimum_values[row, as.character(round(as.numeric(colnames(optimum_values)[col]) - a, 2))]
}else{
ite <- calculate_reward(pt[row], a) + 0
}
if (ite > max_value){
max_value <- ite
}
}
optimum_values[(row-1), col] <- (1 - (lambda * dt_hours))*optimum_values[row,col] + (lambda * dt_hours) * max_value
}
}
# Plots the surface
plot_ly(z=optimum_values, type='surface') %>%
layout(title="Optimal Vt(k)", scene=list(xaxis=list(title="Inventory k"), yaxis=list(title="hour of the day")))
# Creates the matrix to store the values over time (rows) and over k (columns)
optimum_discharge <- matrix(nrow = length(time_line), ncol = length(inventory_level))
colnames(optimum_discharge) <- inventory_level
rownames(optimum_discharge) <- time_line
# fill up with 0 the first column and first row
for (i in 1:length(optimum_discharge[1,])){
optimum_discharge[length(optimum_discharge[,1]),i] <- as.numeric(colnames(optimum_discharge)[i])
}
for (i in 1:length(optimum_discharge[,1])){
optimum_discharge[i,1] <- 0
}
a_list = c(0)
for (col in 2:length(optimum_discharge[1,])){
b <- min(c_bound, as.numeric(colnames(optimum_discharge)[col]))
a_list <- c(a_list, b)
for (row in (length(optimum_discharge[,1])-1):1){
max_value <- 0
a_max = 0
for (a in a_list){
if (as.numeric(colnames(optimum_discharge)[col]) != a){
ite <- calculate_reward(pt[row], a) + optimum_values[row, as.character(round(as.numeric(colnames(optimum_values)[col]) - a, 2))]
}else{
ite <- calculate_reward(pt[row], a) + 0
}
if (ite == max_value){
max_value <- ite
a_max = min(a, a_max)
}else if(ite > max_value){
max_value <- ite
a_max = a
}
}
optimum_discharge[row,col] <- a_max
}
}
# Plots the surface
plot_ly(z=optimum_discharge, type='surface') %>%
layout(title="Optimal Vt(k)", scene=list(xaxis=list(title="Inventory k"), yaxis=list(title="hour of the day")))
# Declares the functions
calculate_reward <- function(pt, a){
temp = (pt*a) + 1
output = log(temp)
return(output)
}
c_bound <- 0.4
# Declare the initial values for functions
dk = 0.01
dt_minutes = 5
dt_hours = dt_minutes / 60
K = 4
time_line = seq(7, 23, dt_hours)
lambda = 1.5585
inventory_level = seq(0, 4, dk)
# Creates the vector to price changes (simulating the real ones)
pt = runif(length(time_line), 10, 40)
# Creates the matrix to store the values over time (rows) and over k (columns)
optimum_values = matrix(nrow = length(time_line), ncol = length(inventory_level))
colnames(optimum_values) <- inventory_level
rownames(optimum_values) <- time_line
# fill up with 0 the first column and first row
for (i in 1:length(optimum_values[1,])){
optimum_values[length(optimum_values[,1]),i] <- 0
}
for (i in 1:length(optimum_values[,1])){
optimum_values[i,1] <- 0
}
a_list = c(0)
for (col in 2:length(optimum_values[1,])){
b <- min(c_bound, as.numeric(colnames(optimum_discharge)[col]))
a_list <- c(a_list, b)
for (row in (length(optimum_values[,1])):1){
max_value <- 0
for (a in a_list){
if (as.numeric(colnames(optimum_values)[col]) != a){
ite <- calculate_reward(pt[row], a) + optimum_values[row, as.character(round(as.numeric(colnames(optimum_values)[col]) - a, 2))]
}else{
ite <- calculate_reward(pt[row], a) + 0
}
if (ite > max_value){
max_value <- ite
}
}
optimum_values[(row-1), col] <- (1 - (lambda * dt_hours))*optimum_values[row,col] + (lambda * dt_hours) * max_value
}
}
a_list = c(0)
for (col in 2:length(optimum_values[1,])){
b <- min(c_bound, as.numeric(colnames(optimum_values)[col]))
a_list <- c(a_list, b)
for (row in (length(optimum_values[,1])):1){
max_value <- 0
for (a in a_list){
if (as.numeric(colnames(optimum_values)[col]) != a){
ite <- calculate_reward(pt[row], a) + optimum_values[row, as.character(round(as.numeric(colnames(optimum_values)[col]) - a, 2))]
}else{
ite <- calculate_reward(pt[row], a) + 0
}
if (ite > max_value){
max_value <- ite
}
}
optimum_values[(row-1), col] <- (1 - (lambda * dt_hours))*optimum_values[row,col] + (lambda * dt_hours) * max_value
}
}
# Plots the surface
plot_ly(z=optimum_values, type='surface') %>%
layout(title="Optimal Vt(k)", scene=list(xaxis=list(title="Inventory k"), yaxis=list(title="hour of the day")))
# Creates the matrix to store the values over time (rows) and over k (columns)
optimum_discharge <- matrix(nrow = length(time_line), ncol = length(inventory_level))
colnames(optimum_discharge) <- inventory_level
rownames(optimum_discharge) <- time_line
# fill up with 0 the first column and first row
for (i in 1:length(optimum_discharge[1,])){
optimum_discharge[length(optimum_discharge[,1]),i] <- as.numeric(colnames(optimum_discharge)[i])
}
for (i in 1:length(optimum_discharge[,1])){
optimum_discharge[i,1] <- 0
}
a_list = c(0)
for (col in 2:length(optimum_discharge[1,])){
b <- min(c_bound, as.numeric(colnames(optimum_discharge)[col]))
a_list <- c(a_list, b)
for (row in (length(optimum_discharge[,1])-1):1){
max_value <- 0
a_max = 0
for (a in a_list){
if (as.numeric(colnames(optimum_discharge)[col]) != a){
ite <- calculate_reward(pt[row], a) + optimum_values[row, as.character(round(as.numeric(colnames(optimum_values)[col]) - a, 2))]
}else{
ite <- calculate_reward(pt[row], a) + 0
}
if (ite == max_value){
max_value <- ite
a_max = min(a, a_max)
}else if(ite > max_value){
max_value <- ite
a_max = a
}
}
optimum_discharge[row,col] <- a_max
}
}
# Plots the surface
plot_ly(z=optimum_discharge, type='surface') %>%
layout(title="Optimal Vt(k)", scene=list(xaxis=list(title="Inventory k"), yaxis=list(title="hour of the day")))
length(optimum_discharge[,1])-1):1
(length(optimum_discharge[,1])-1):1
a_list = c(0)
for (col in 2:length(optimum_discharge[1,])){
b <- min(c_bound, as.numeric(colnames(optimum_discharge)[col]))
a_list <- c(a_list, b)
for (row in (length(optimum_discharge[,1])):1){
max_value <- 0
a_max = 0
for (a in a_list){
if (as.numeric(colnames(optimum_discharge)[col]) != a){
ite <- calculate_reward(pt[row], a) + optimum_values[row, as.character(round(as.numeric(colnames(optimum_values)[col]) - a, 2))]
}else{
ite <- calculate_reward(pt[row], a) + 0
}
if (ite == max_value){
max_value <- ite
a_max = min(a, a_max)
}else if(ite > max_value){
max_value <- ite
a_max = a
}
}
optimum_discharge[row,col] <- a_max
}
}
art <- read_html('https://www.amazon.com/s/ref=nb_sb_noss_2?url=search-alias%3Damazonfresh&field-keywords=rice')
library(rvest)
art <- read_html('https://www.amazon.com/s/ref=nb_sb_noss_2?url=search-alias%3Damazonfresh&field-keywords=rice')
art %>%
html_nodes('.s-access-title') %>%
html_text() -> authors
authors
link = 'http://pubsonline.informs.org/doi/ref/10.1287/msom.2015.0518'
art <- read_html(link)
art %>%
html_nodes('.references .NLM_article-title') %>%
html_text() -> refs
refs
create_str_from_list <- function(list){
c <- 0
for (item in list){
if(c == 0){list_insert <- paste0(item); c<-c+1}else{
list_insert <- paste0(list_insert, '|', item)
c<-c+1
}
}
return(list_insert)
}
create_str_from_list(refs)
links_list <- read.table(paste0(path_to_files,path_to_links_file))
path_to_files = '/Users/pedroveronezi/BIA656_PaperProbability/'
path_to_links_file <- 'links_ids.txt'
con = dbConnect(RSQLite::SQLite(), dbname=paste0(path_to_files,"PaperProbability.db"))
min_max_sleep_time <- c(60, 120)
links_list <- read.table(paste0(path_to_files,path_to_links_file))
links_list[[1]][1]
as.character(links_list[[1]][1])
link <- as.character(link)
links_id_insert <- gsub("http://pubsonline.informs.org/doi/abs/", base_string, links_id)
links_id_insert <- gsub("http://pubsonline.informs.org/doi/abs/", base_string, link)
base_string <- "http://pubsonline.informs.org/doi/ref/10.1287/"
link_adj <- gsub("http://pubsonline.informs.org/doi/abs/", base_string, link)
link_adj
link
path_to_files = '/Users/pedroveronezi/BIA656_PaperProbability/'
path_to_links_file <- 'links_ids.txt'
con = dbConnect(RSQLite::SQLite(), dbname=paste0(path_to_files,"PaperProbability.db"))
min_max_sleep_time <- c(60, 120)
links_list <- read.table(paste0(path_to_files,path_to_links_file))
link = links_list[[1]][1]
link <- as.character(link)
link_adj <- gsub("http://pubsonline.informs.org/doi/abs/", base_string, link)
link
link_adj
link = links_list[[1]][2]
link <- as.character(link)
link_adj <- gsub("http://pubsonline.informs.org/doi/abs/10.1287/", base_string, link)
link
link_adj
art <- read_html(link_adj)
art %>%
html_nodes('.references td') %>%
html_text()
art %>%
html_nodes('.references i') %>%
html_text()
art %>%
html_nodes('.references i') %>%
html_text()
art %>%
html_nodes('.references .NLM_names') %>%
html_text() -> main_author
main_author
art %>%
html_nodes('.references .NLM_author') %>%
html_text() -> main_author
main_author
art %>%
html_nodes('.references .NLM_given_names') %>%
html_text() -> main_author
main_author
art %>%
html_nodes('.references .NLM_given-names') %>%
html_text() -> main_author
main_author
art %>%
html_nodes('.references td') %>%
html_text() -> complete_refs
complete_refs
complete_reference <- refs[1]
year_1 <- year[1]
art %>%
html_nodes('.NLM_year') %>%
html_text() -> year
year_1 <- year[1]
regexpr(paste0('(',year_1,')'), complete_reference)
paste0('(',year_1,')')
complete_reference
complete_reference <- recomplete_refs[1]
complete_reference <- complete_refs[1]
regexpr(paste0('(',year_1,')'), complete_reference)
complete_reference
complete_refs
for (ref in complete_refs){
if (length(ref) < 5){print(ref)}}
length(complete_reference)
length(complete_refs[2])
nchar(complete_refs[2])
nchar(complete_refs[1])
to_delete <- c()
for(i in 1:length(complete_refs)){
if(nchar(complete_refs[i]) < 5){
to_delete <- c(to_delete, i)
}
}
to_delete
complete_refs[complete_refs != " "]
complete_refs = complete_refs[complete_refs != "  "]
complete_refs = complete_refs[complete_refs != " "]
complete_refs = complete_refs[complete_refs != ""]
complete_refs[complete_refs != " "]complete_refs
complete_refs
complete_reference <- complete_refs[1]
regexpr(paste0('(',year_1,')'), complete_reference)
length(year)
complete_reference
complete_reference(1:36)
substr(complete_reference, 1, 36)
regexpr(paste0('(',year_1,')'), complete_reference)
substr(complete_reference, 1, 34)
substr(complete_reference, 1, 33)
substr(complete_reference, 1, 34)
authors <- c()
for(i in 1:length(complete_refs)){
idx <- regexpr(paste0('(',year[i],')'), complete_refs[i])
authors <- c(authors, substr(complete_refs[i], 1, (idx-2)))
}
authors
authors_insert <- create_str_from_list(authors)
authors_insert
filter_css = '.js_issue'
link_html <- 'http://pubsonline.informs.org/loi/mnsc?-19599559565758&expanded=1959-1969&expanded=7&expanded=6&expanded=1962&expanded=1963&expanded=10016&expanded=62010611712&expanded=58&expanded=2013&expanded=59&expanded=2014&expanded=60&expanded=2015&expanded=61-2009&expanded=2009&expanded=55&expanded=1965&expanded=1966&expanded=1967&expanded=1968&expanded=1969-1989&expanded=19895&expanded=26&expanded=1981&expanded=27&expanded=1982&expanded=28&expanded=1983&expanded=29&expanded=19840&expanded=1985&expanded=31&expanded=1986&expanded=32&expanded=1987&expanded=33&expanded=1988&expanded=34&expanded=1954&expanded=MT-1&expanded=MT-2&expanded=9-1979&expanded=1971&expanded=1972&expanded=1973&expanded=1975&expanded=1976&expanded=1977&expanded=1978&expanded=1979&expanded=25&expanded=1974-1999&expanded=36&expanded=1991&expanded=37&expanded=1992&expanded=38&expanded=1993&expanded=39&expanded=1994&expanded=40&expanded=1995&expanded=41&expanded=1996&expanded=42&expanded=1997&expanded=43&expanded=1998&expanded=44&expanded=1999&expanded=45&expanded=46&expanded=2001&expanded=47&expanded=2002&expanded=48&expanded=2003&expanded=49&expanded=2004&expanded=50&expanded=2005&expanded=51&expanded=2006&expanded=52&expanded=2007&expanded=53&expanded=2008&expanded=54'
art <- read_html(link_html)
library(rvest)
library(RSQLite)
library(DBI)
art <- read_html(link_html)
art %>%
html_nodes('.js_issue') %>%
html_text() -> links
links
art %>%
html_nodes('.js_issue') %>%
html_attr() -> links
art %>%
html_nodes('.js_issue') %>%
html_children() -> links
links
lengt(links)
lenght(links)
length(links)
art %>%
html_nodes('.js_issue .href') %>%
html_text() -> links
links
art %>%
html_nodes('.js_issue') %>%
html_attrs('href') -> links
art %>%
html_nodes('.js_issue') %>%
html_attr('href') -> links
links
art %>%
html_nodes('.js_issue a') %>%
html_attr('href') -> links
links
setwd("~/BIA656_PaperProbability")
lapply(links, write, "links_id_MNSC.txt", append=TRUE)
